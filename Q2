#include <iostream>
#include <unordered_set>
#include <vector>
using namespace std;

int wordBreak(int n, const string& s, const vector<string>& dictionary) {
    unordered_set<string> wordDict(dictionary.begin(), dictionary.end()); // Create a set for fast lookup
    int len = s.length();
    vector<bool> dp(len + 1, false);
    
    dp[0] = true; // Base case: empty string can always be segmented

    // Fill the dp array
    for (int i = 1; i <= len; ++i) {
        for (int j = 0; j < i; ++j) {
            // If s[j...i-1] is a word in the dictionary and dp[j] is true
            if (dp[j] && wordDict.find(s.substr(j, i - j)) != wordDict.end()) {
                dp[i] = true;
                break;
            }
        }
    }

    // If dp[len] is true, the entire string can be segmented
    return dp[len] ? 1 : 0;
}

int main() {
    int n = 6;
    string s = "ilikesamsung";
    vector<string> dictionary = { "i", "like", "sam", "sung", "samsung", "mobile" };
    
    cout << wordBreak(n, s, dictionary) << endl; // Output: 1

    return 0;
}
