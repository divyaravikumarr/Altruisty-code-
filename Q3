#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


void dfs(int num, int n, int m, vector<int>& result) {
   
    if (num >= n && num <= m) {
        result.push_back(num);
    }
    if (num == 0 || num > m) return;
    int last_digit = num % 10;
    int step_down = num * 10 + (last_digit - 1);
    int step_up = num * 10 + (last_digit + 1);
    if (last_digit > 0 && step_down <= m) {
        dfs(step_down, n, m, result);
    }
    if (last_digit < 9 && step_up <= m) {
        dfs(step_up, n, m, result);
    }
}
vector<int> findSteppingNumbers(int n, int m) {
    vector<int> result;
    for (int i = 0; i <= 9; i++) {
        dfs(i, n, m, result);
    }
    sort(result.begin(), result.end());

    return result;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<int> steppingNumbers = findSteppingNumbers(n, m);
    for (int num : steppingNumbers) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
